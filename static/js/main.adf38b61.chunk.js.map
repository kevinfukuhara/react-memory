{"version":3,"sources":["components/NavBar/index.js","components/Card/index.js","components/Game.js","App.js","serviceWorker.js","index.js"],"names":["NavBar","react_default","a","createElement","className","href","this","props","guessStatus","id","yourScore","highScore","React","Component","Card","state","style","backgroundImage","_this","character","image","changeImage","setState","onRef","undefined","_this2","value","name","onClick","handleGuess","Game","boardPlacement","chars","shuffleBoard","charOrder","i","length","j","Math","floor","random","_ref","reorderBoard","console","log","child1","child2","child3","child4","child5","child6","child7","child8","child9","Fragment","components_Card","ref","App","selection","includes","newArray","push","yourNewScore","child","react_router_dom","components_NavBar","react_router","path","render","components_Game","Boolean","window","location","hostname","match","ReactDOM","src_App_0","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.adf38b61.chunk.js","sourcesContent":["import React from 'react';\r\n// import M from 'materialize-css'\r\n\r\nimport { Link } from \"react-router-dom\";\r\n\r\nimport './NavBar.css';\r\n\r\n\r\nclass NavBar extends React.Component {\r\n\r\n    componentDidMount(){\r\n        // M.Nav.init(this.nav);\r\n    }\r\n\r\n    render() {\r\n        return (\r\n            <nav>\r\n                <div className=\"nav-wrapper\">\r\n                    {/* <Link to=\"/\" className=\"brand-logo\"><NavItem href=\"/\">React Memories - 90s Nostalgia</NavItem></Link> */}\r\n                    <a href=\"/\" className=\"brand-logo\">React Memories - 90s Nostalgia</a>\r\n\r\n                    <a href=\"#\" className=\"brand-logo center\">{this.props.guessStatus}</a>\r\n\r\n                    <ul id=\"nav-mobile\" className=\"right hide-on-med-and-down\">\r\n                        <li className=\"tab\"><a href=\"#\">Score: {this.props.yourScore} </a></li>\r\n                        <li className=\"tab\"><a href=\"#\">High Score: {this.props.highScore} </a></li>\r\n                    </ul>\r\n                </div>\r\n            </nav>\r\n        );\r\n    };\r\n}\r\n\r\n// function NavBar(props) {\r\n//     return (\r\n//         <nav>\r\n//         <div className=\"nav-wrapper\">\r\n//           <Link to=\"/\" className=\"brand-logo\">React Memories - 90s Nostalgia</Link>\r\n//           <ul id=\"nav-mobile\" className=\"right hide-on-med-and-down\">\r\n//             <li>Score: {props.yourScore} </li>\r\n//             <li>High Score: {props.highScore}</li>\r\n//           </ul>\r\n//         </div>\r\n//       </nav>\r\n//     );\r\n// }\r\n\r\nexport default NavBar; ","import React, { Component } from 'react';\r\n\r\nimport \"./card.css\"\r\n\r\nclass Card extends Component{\r\n    state = {\r\n        style: {backgroundImage:\"url(\" + this.props.character.image + \")\"}\r\n    }\r\n\r\n    componentDidMount() {\r\n        this.props.onRef(this)\r\n    }\r\n    componentWillUnmount() {\r\n        this.props.onRef(undefined)\r\n    }\r\n\r\n    changeImage = image => {\r\n        // Update the state in this component\r\n        this.setState( { style: {backgroundImage:\"url(\" + image + \")\"} } );\r\n        // console.log(\"Changing the image state!\")\r\n    }\r\n\r\n    render(){\r\n        return(\r\n            <div className=\"card-item\" style={this.state.style} value={this.props.character.id} name={this.props.character.name} onClick={() => this.props.handleGuess(this.props.character.id)}>\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nexport default Card;","import React, { Component } from 'react';\r\nimport Card from \"./Card\"\r\n\r\nimport chars from \"../card-seeds.json\";\r\n\r\nclass Game extends Component {\r\n    state = {\r\n        // characters: chars,\r\n        boardPlacement: chars\r\n\r\n    }\r\n\r\n    // componentDidMount(){\r\n    //     // By default shuffle the board\r\n    //     // this.setState({ boardPlacement:this.shuffleBoard(this.state.characters) });\r\n    //     this.reorderBoard();\r\n    // }\r\n\r\n    componentDidMount() {\r\n        this.props.onRef(this)\r\n    }\r\n    componentWillUnmount() {\r\n        this.props.onRef(undefined)\r\n    }\r\n\r\n    shuffleBoard = charOrder => {\r\n        // Shuffle the characters within boardPlacement\r\n        for (let i = charOrder.length - 1; i > 0; i--) {\r\n\r\n            // console.log(charOrder[i]);\r\n\r\n            const j = Math.floor(Math.random() * (i + 1));\r\n            [charOrder[i], charOrder[j]] = [charOrder[j], charOrder[i]];\r\n        }\r\n\r\n        return charOrder;\r\n    };\r\n\r\n    reorderBoard = () => {\r\n        // By default shuffle the board\r\n        // console.log(this.state.boardPlacement)\r\n        \r\n        \r\n        this.setState({ boardPlacement: this.shuffleBoard(this.state.boardPlacement)});\r\n        // console.log(this.state.boardPlacement)\r\n        \r\n        console.log(\"Board has been shuffled!\");\r\n        \r\n        this.child1.changeImage(this.state.boardPlacement[0].image);\r\n        this.child2.changeImage(this.state.boardPlacement[1].image);\r\n        this.child3.changeImage(this.state.boardPlacement[2].image);\r\n        this.child4.changeImage(this.state.boardPlacement[3].image);\r\n        this.child5.changeImage(this.state.boardPlacement[4].image);\r\n        this.child6.changeImage(this.state.boardPlacement[5].image);\r\n        this.child7.changeImage(this.state.boardPlacement[6].image);\r\n        this.child8.changeImage(this.state.boardPlacement[7].image);\r\n        this.child9.changeImage(this.state.boardPlacement[8].image);\r\n    }\r\n\r\n    render() {\r\n        return (\r\n            // <div className=\"container\">\r\n            <React.Fragment>\r\n                <div className=\"row\">\r\n                    <div className=\"col s4\">\r\n                        <Card\r\n                            character={this.state.boardPlacement[0]}\r\n                            handleGuess={this.props.handleGuess}\r\n                            onRef={ref => (this.child1 = ref)}\r\n                        />\r\n                    </div>\r\n                    <div className=\"col s4\">\r\n                        <Card\r\n                            character={this.state.boardPlacement[1]}\r\n                            handleGuess={this.props.handleGuess}\r\n                            onRef={ref => (this.child2 = ref)}\r\n                        />\r\n                    </div>\r\n                    <div className=\"col s4\">\r\n                        <Card\r\n                            character={this.state.boardPlacement[2]}\r\n                            handleGuess={this.props.handleGuess}\r\n                            onRef={ref => (this.child3 = ref)}\r\n                        />\r\n                        {/* <Card \r\n                            character={this.state.boardPlacement[2]}\r\n                        /> */}\r\n                    </div>\r\n                </div>\r\n\r\n                <div className=\"row\">\r\n                    <div className=\"col s4\">\r\n                        <Card\r\n                            character={this.state.boardPlacement[3]}\r\n                            handleGuess={this.props.handleGuess}\r\n                            onRef={ref => (this.child4 = ref)}\r\n                        />\r\n                    </div>\r\n                    <div className=\"col s4\">\r\n                        <Card\r\n                            character={this.state.boardPlacement[4]}\r\n                            handleGuess={this.props.handleGuess}\r\n                            onRef={ref => (this.child5 = ref)}\r\n                        />\r\n                    </div>\r\n                    <div className=\"col s4\">\r\n                        <Card\r\n                            character={this.state.boardPlacement[5]}\r\n                            handleGuess={this.props.handleGuess}\r\n                            onRef={ref => (this.child6 = ref)}\r\n                        />\r\n                    </div>\r\n                </div>\r\n\r\n                <div className=\"row\">\r\n                    <div className=\"col s4\">\r\n                        <Card\r\n                            character={this.state.boardPlacement[6]}\r\n                            handleGuess={this.props.handleGuess}\r\n                            onRef={ref => (this.child7 = ref)}\r\n                        />\r\n                    </div>\r\n                    <div className=\"col s4\">\r\n                        <Card\r\n                            character={this.state.boardPlacement[7]}\r\n                            handleGuess={this.props.handleGuess}\r\n                            onRef={ref => (this.child8 = ref)}\r\n                        />\r\n                    </div>\r\n                    <div className=\"col s4\">\r\n                        <Card\r\n                            character={this.state.boardPlacement[8]}\r\n                            handleGuess={this.props.handleGuess}\r\n                            onRef={ref => (this.child9 = ref)}\r\n                        />\r\n                    </div>\r\n                </div>\r\n\r\n            </React.Fragment>\r\n            // </div>\r\n\r\n        )\r\n    }\r\n\r\n}\r\n\r\nexport default Game;","import React, { Component } from 'react';\r\nimport { BrowserRouter as Router, Route } from \"react-router-dom\";\r\n\r\n// Imported Components Made by me \r\nimport NavBar from './components/NavBar';\r\nimport Game from './components/Game';\r\n\r\nimport './App.css';\r\n\r\nclass App extends Component {\r\n  state = {\r\n    yourScore: 0,\r\n    highScore: 0,\r\n    selection: [],\r\n    guessStatus: \"\"\r\n  }\r\n\r\n  handleGuess = id => {\r\n    console.log(\"Triggered HandleGuess method: id - \" + id);\r\n\r\n    console.log(this.state.selection);\r\n\r\n    // Check if the guess's id already exists in the selection array\r\n    if (this.state.selection.includes(id)) {\r\n      // CASE: Incorrect! - User has guessed this before\r\n      console.log(\"INCORRECT\");\r\n       // Send incorrect guess message to the NavBar via the guessStatus state\r\n       let guessStatus = \"Incorrect...\"\r\n       this.setState({ guessStatus });\r\n\r\n      // Reset user Score\r\n      let yourScore = 0;\r\n      this.setState({ yourScore });\r\n\r\n      // reset the selection array\r\n      let selection = [];\r\n      this.setState({ selection })\r\n\r\n    } else {\r\n      console.log(\"CORRECT!\");\r\n      // Send correct guess to the NavBar via the guessStatus state\r\n      let guessStatus = \"Correct!\"\r\n      this.setState({ guessStatus });\r\n\r\n      // Add the user's guess into the selection \r\n      let newArray = this.state.selection;\r\n      newArray.push(id);\r\n      this.setState({ selection: newArray });\r\n\r\n      // Add +1 to yourScore\r\n      let yourNewScore = this.state.yourScore;\r\n      yourNewScore = yourNewScore + 1;\r\n      this.setState({ yourScore: yourNewScore })\r\n\r\n      // Compare yourScore to Highscore\r\n      if (yourNewScore > this.state.highScore) {\r\n        this.setState({ highScore: yourNewScore });\r\n      }\r\n    }\r\n\r\n    // Shuffle the Board\r\n    this.child.reorderBoard();\r\n  }\r\n\r\n  render() {\r\n    return (\r\n      <React.Fragment>\r\n        <Router>\r\n          <NavBar\r\n            yourScore={this.state.yourScore}\r\n            highScore={this.state.highScore}\r\n            guessStatus={this.state.guessStatus}\r\n          />\r\n\r\n          <div className=\"container\">\r\n            {/* <Route exact path=\"/\" component={Game} \r\n            handleGuess={this.handleGuess}\r\n          /> */}\r\n            {/* <Game onRef={ref => (this.child = ref)} /> */}\r\n            {/* <Game /> */}\r\n            <Route\r\n              path=\"/\"\r\n              render={(props) =>\r\n                <Game\r\n                  handleGuess={this.handleGuess}\r\n                  onRef={ref => (this.child = ref)}\r\n                />}\r\n            />\r\n          </div>\r\n        </Router>\r\n      </React.Fragment>\r\n    );\r\n  }\r\n}\r\n\r\nexport default App;\r\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}